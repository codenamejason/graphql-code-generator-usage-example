/* tslint:disable */

{{#ifDirective this "entity" }}
import * as Mongoose from 'mongoose';
import { ObjectID } from 'mongodb';
{{/ifDirective}}
{{#eachImport this }}
{{#ifCond type '===' "enum"}}
import { {{ name }}, {{ name }}ValuesArray } from './{{ file }}';
{{else}}
{{#withGql type name }}
{{#ifDirective this "entity" }}
{{#if embedded}}
import { {{ ../name }}, {{ ../name }}Embedded } from './{{ ../../file }}';
{{else}}
import { {{ ../name }} } from './{{ ../../file }}';
{{/if}}
{{/ifDirective}}
{{#unlessDirective this "entity" }}
import { {{ ../name }} } from './{{ ../../file }}';
{{/unlessDirective}}
{{/withGql}}
{{/ifCond}}
{{/eachImport}}

{{ toComment description }}
export interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {
{{#each fields}}
  {{ name }}: {{ toPrimitive type }}{{#isArray this}}[]{{/isArray}}{{#unless isRequired}} | null{{/unless}}; {{ toComment description }}
{{/each}}
}

{{#each fields}}
{{~# if hasArguments }}
export interface {{ toPascalCase name }}{{ toPascalCase ../name }}Args {
{{#each arguments}}
  {{ name }}: {{ toPrimitive type }}{{#isArray this }}[]{{/isArray}}{{#unless isRequired}} | null{{/unless}}; {{ toComment description }}
{{/each}}
}

{{/if}}
{{/each}}
{{#ifDirective this "entity" }}
{{#if embedded }}
export const {{ ../name }}Embedded = {
{{#filterModelFields ../fields}}
  {{#unlessDirective this "id" }}
  {{ ../name }}: {{#isArray ../this }}[{{/isArray}}{ type: {{toMongooseType ../this}}{{#ifDirective ../../this "match"}}, match: [{{ regex }}{{#if error}}, '{{ error }}'{{/if}}]{{/ifDirective}}{{#ifDirective ../this "validation" }}{{#if max }}, max{{#ifCond ../../type '===' 'String'}}length{{/ifCond}}: {{ max }}{{/if}}{{#if min }}, min{{#ifCond ../../type '===' 'String'}}length{{/ifCond}}: {{ min }}{{/if}}{{/ifDirective}}{{#ifDirective ../this "column"}}{{#if index}}, index: true{{/if}}{{#if unique}}, unique: true{{/if}}{{/ifDirective}}{{#if ../isRequired}}, required: true{{/if}}{{#if ../isEnum}}, 'enum': {{ ../../type }}ValuesArray{{/if}}{{#ifDirective ../this "stringManipulation"}}{{#if lowercase}}, lowercase: true{{/if}}{{#if trim}}, trim: true{{/if}}{{#if uppercase}}, uppercase: true{{/if}}{{/ifDirective}} }{{#isArray ../this }}]{{/isArray}},
  {{/unlessDirective}}
{{/filterModelFields}}
};
{{else}}
const {{ ../name }}Schema = new Mongoose.Schema({
{{#filterModelFields ../fields}}
  {{#unlessDirective this "id" }}
  {{ ../name }}: {{#ifDirective ../this "embedded" }}{{#isArray ../../this }}[{{/isArray}}{{ ../../type }}Embedded{{#if ../../isArray }}]{{/if}}{{/ifDirective}}{{#unlessDirective ../this "embedded"}}{{#isArray ../this }}[{{/isArray}}{{#if ../isUnion }}{{toMongooseType ../../this}}{{else}}{ type: {{toMongooseType ../../this}}{{#ifDirective ../../this "match"}}, match: [{{ regex }}{{#if error}}, '{{ error }}'{{/if}}]{{/ifDirective}}{{#ifDirective ../../this "validation" }}{{#if max }}, max{{#ifCond ../../../type '===' 'String'}}length{{/ifCond}}: {{ max }}{{/if}}{{#if min }}, min{{#ifCond ../../../type '===' 'String'}}length{{/ifCond}}: {{ min }}{{/if}}{{/ifDirective}}{{#ifDirective ../../this "column"}}{{#if index}}, index: true{{/if}}{{#if unique}}, unique: true{{/if}}{{/ifDirective}}{{#if ../../isRequired}}, required: true{{/if}}{{#if ../../isEnum}}, 'enum': {{ ../../type }}ValuesArray{{/if}}{{#ifDirective ../../this "stringManipulation"}}{{#if lowercase}}, lowercase: true{{/if}}{{#if trim}}, trim: true{{/if}}{{#if uppercase}}, uppercase: true{{/if}}{{/ifDirective}} }{{/if}}{{#isArray ../this }}]{{/isArray}}{{/unlessDirective}},
  {{/unlessDirective}}
{{/filterModelFields}}
});

export interface {{ ../name }}DbObject extends Mongoose.Document {
  _id: ObjectID;
{{#filterModelFields ../fields}}
  {{#unlessDirective this "id" }}
    {{ ../name }}?: {{#if ../isEnum}}string{{else}}{{#ifDirective ../../this "link" }}ObjectID{{/ifDirective}}{{#unlessDirective ../../this "link" }}{{#ifDirective ../../../this "column"}}{{#if type}}{{ type }}{{#if isArray}}[]{{/if}}{{else}}{{ toPrimitive ../../../../type }}{{/if}}{{/ifDirective}}{{#unlessDirective ../../../this "column"}}{{ toPrimitive ../../../type }}{{/unlessDirective}}{{/unlessDirective}}{{/if}}{{#if ../isArray}}[]{{/if}};
  {{/unlessDirective}}
{{/filterModelFields}}
}

export const {{ ../name }}Model = Mongoose.model('{{ ../name }}', {{ ../name }}Schema);
{{/if}}
{{/ifDirective}}